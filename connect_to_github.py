#!/usr/bin/env python3
"""
AI CEO Platform GitHub Connection Script
Connect your entire AI CEO platform to GitHub account: starksaiceo45@gmail.com
"""

import os
import subprocess
import sys

def run_command(cmd, description=""):
    """Run a shell command and return the result"""
    print(f"\nüîß {description}")
    print(f"Running: {cmd}")
    
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ Success: {result.stdout.strip()}")
            return True, result.stdout
        else:
            print(f"‚ùå Error: {result.stderr.strip()}")
            return False, result.stderr
    except Exception as e:
        print(f"‚ùå Exception: {e}")
        return False, str(e)

def main():
    print("üöÄ AI CEO Platform - GitHub Connection Setup")
    print("üìß Connecting to GitHub account: starksaiceo45@gmail.com")
    print("üìÇ Project size: ~1.9GB with 20,000+ files")
    
    # Configure Git identity
    print("\n" + "="*50)
    print("STEP 1: Configure Git Identity")
    print("="*50)
    
    success, _ = run_command(
        'git config user.email "starksaiceo45@gmail.com"',
        "Setting Git email"
    )
    
    success, _ = run_command(
        'git config user.name "AI CEO Platform"',
        "Setting Git username"
    )
    
    # Initialize repository if needed
    print("\n" + "="*50)
    print("STEP 2: Initialize Repository")
    print("="*50)
    
    if not os.path.exists('.git'):
        success, _ = run_command(
            'git init',
            "Initializing Git repository"
        )
    else:
        print("‚úÖ Git repository already exists")
    
    # Show current status
    print("\n" + "="*50)
    print("STEP 3: Repository Status")
    print("="*50)
    
    run_command('git status --porcelain | wc -l', "Counting untracked files")
    
    # Add all files (respecting .gitignore)
    print("\n" + "="*50)
    print("STEP 4: Stage All Files")
    print("="*50)
    
    success, _ = run_command(
        'git add .',
        "Adding all files to staging (this may take a moment for large projects)"
    )
    
    # Create initial commit
    print("\n" + "="*50)
    print("STEP 5: Create Initial Commit")
    print("="*50)
    
    success, _ = run_command(
        'git commit -m "Initial commit: AI CEO Platform - Complete autonomous business automation system with 20K+ files"',
        "Creating initial commit"
    )
    
    # Instructions for GitHub connection
    print("\n" + "="*60)
    print("STEP 6: Connect to GitHub - MANUAL STEPS REQUIRED")
    print("="*60)
    
    print("""
üéØ NEXT STEPS - Complete these manually:

1. CREATE GITHUB REPOSITORY:
   ‚Ä¢ Go to https://github.com
   ‚Ä¢ Sign in with: starksaiceo45@gmail.com
   ‚Ä¢ Click '+' ‚Üí 'New repository'
   ‚Ä¢ Name: 'ai-ceo-platform' 
   ‚Ä¢ Description: 'Autonomous Business Automation Platform'
   ‚Ä¢ Keep it Public or Private (your choice)
   ‚Ä¢ DO NOT initialize with README (you have files already)
   ‚Ä¢ Click 'Create repository'

2. ADD REMOTE AND PUSH:
   Copy and run these commands in Replit Console:

   git remote add origin https://github.com/starksaiceo45/ai-ceo-platform.git
   git branch -M main
   git push -u origin main

3. AUTHENTICATION:
   When prompted for credentials:
   ‚Ä¢ Username: starksaiceo45
   ‚Ä¢ Password: Create a Personal Access Token at:
     GitHub ‚Üí Settings ‚Üí Developer settings ‚Üí Personal access tokens
     ‚Üí Generate new token ‚Üí Select 'repo' scope

üìä YOUR PLATFORM DATA TO BE UPLOADED:
   ‚Ä¢ 20,000+ Python files
   ‚Ä¢ Complete AI CEO SaaS platform
   ‚Ä¢ User authentication system
   ‚Ä¢ Business automation tools
   ‚Ä¢ Marketing automation
   ‚Ä¢ Voice system integration
   ‚Ä¢ Database schemas
   ‚Ä¢ All configurations and assets
   ‚Ä¢ Total size: ~1.9GB

üîí PROTECTED FILES (won't be uploaded):
   ‚Ä¢ Database files (ai_ceo_saas.db, etc.)
   ‚Ä¢ Environment files (.env)
   ‚Ä¢ API keys and secrets
   ‚Ä¢ Session data
   ‚Ä¢ Cache files

‚úÖ READY FOR GITHUB!
""")

if __name__ == "__main__":
    main()